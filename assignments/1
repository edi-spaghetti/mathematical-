Problem Set 1
=============

 - ∀ for every
 - ∨ or
 - ∧ and
 - ⊼ nand
 - ⇒ implication
 - ¬ not

## Problem 1

Using the following definitions, convert English sentences into predicate logic.


	X is the set of people	
	S(x) ::= x has been a student of 6.042
	A(x) ::= x got an A on 6.042
	T(x) ::= x is a TA on 6.042
	E(x,y) ::= x and y are the same person

a) There are people who have taken 6.042 and have gotten A’s in 6.042

	∃x ∈ X. S(x) ∧ A(x)

b) All people who are 6.042 TA’s and have taken 6.042 got A’s in 6.042

	∃x ∈ X. T(x) ∧ S(x) ⇒ A(x)

c) There are no people who are 6.042 TA’s who did not get A’s in 6.042

	∀x ∈ X. ¬A(x) ⇒ ¬T(x)

d) There are at least three people who are TA’s in 6.042 and have not taken 6.042

	∃x,y,z ∈ X. ¬E(x,y) ∧ ¬E(x,z) ∧ ¬E(y,z) ∧ (T(x) ∧  ¬S(x)) ∧ (T(y) ∧  ¬S(y)) ∧ (T(z) ∧  ¬S(z))


## Problem 2

Use a truth table to prove or disprove the following statements:

a) ¬(P ∨ (Q ∧ R)) = (¬P) ∧ (¬Q ∨ ¬R)

| P | Q | R |  ¬(P ∨ (Q ∧ R)) | (¬P) ∧ (¬Q ∨ ¬R) |
| F | F | F |        T        |          T        |
| F | F | T |        T        |          T        |
| F | T | F |        T        |          T        |
| F | T | T |        F        |          F        |
| T | F | F |        F        |          F        |
| T | F | T |        F        |          F        |
| T | T | F |        F        |          F        |
| T | T | T |        F        |          F        |

They're all the same, so they are equal. For fun I ran this in python to verify.

```python
from itertools import product
X = product([True, False], repeat=3)
result = 'Proved'
for P, Q, R in X:
	if not (P or (Q and R)) != (not P) and (not Q or not R):
		print((P, Q, R))
		result = 'Disproved'
print(result)
# >>> Proved
```

b) ¬(P ∧ (Q ∨ R)) = ¬P ∨ (¬Q ∨ ¬R)

| P | Q | R |  ¬(P ∧ (Q ∨ R)) | ¬P ∨ (¬Q ∨ ¬R) |
| F | F | F |        T        |        T        |
| F | F | T |        T        |        T        |
| F | T | F |        T        |        T        |
| F | T | T |        T        |        T        |
| T | F | F |        T        |        T        |
| T | F | T |        F        |        T        |
| T | T | F |        F        |        T        |
| T | T | T |        F        |        F        |

Two discrepancies at TFT and TTF. I ran in through python again, to check my answers.

```python
from itertools import product
X = product([True, False], repeat=3)
result = 'Proved'
for P, Q, R in X:
	if not (P and (Q or R)) != (not P or (not Q or not R)):
		print((P, Q, R))
		result = 'Disproved'
print(result)
# >>> (True, True, False)
# >>> (True, False, True)
# >>> Disproved
```


## Problem 3

a) Find equivalent expressions using only ⊼ (nand) and ¬ (not)

i) A ∧ B

	¬(A ⊼ B)

ii) A ∨ B

	(¬A) ⊼ (¬B)

iii) A ⇒ B

	¬A ⊼ (¬B)

b) Find an equivalent expression for (¬A) using only nand and grouping parentheses

	(A ⊼ A)

c) The constants true and false themselves may be expressed using only nand.

i) Construct an expression using an arbitrary statement A and nand that evaluates to true regardless of whether A is true or false

	(A ⊼ A) ⊼ A

ii) Construct a second expression that always evaluates to false

	((A ⊼ A) ⊼ A) ⊼ ((A ⊼ A) ⊼ A)

